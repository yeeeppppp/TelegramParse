import configparser
import json
import asyncio
from telethon import TelegramClient
from telethon.errors import FloodWaitError

config = configparser.ConfigParser()
config.read("config.ini")

api_id = config['Telegram']['api_id']
api_hash = config['Telegram']['api_hash']
username = config['Telegram']['username']

client = TelegramClient(username, api_id, api_hash)

async def send_mass_messages():

    try:
        with open('channel_users.json', 'r', encoding='utf-8') as file:
            users = json.load(file)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª channel_users.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ channel_users.json")

    message_text = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ")
    
    if not message_text.strip():
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    print(f"üì® –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: '{message_text}'")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    success_count = 0
    fail_count = 0
    
    for i, user in enumerate(users, 1):
        user_id = user.get('id')
        username = user.get('username', user.get('first_name', f'user_{user_id}'))
        
        if not user_id:
            print(f"‚ùå [{i}/{len(users)}] –ù–µ—Ç ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            fail_count += 1
            continue
        
        try:
            await client.send_message(user_id, message_text)
            success_count += 1
            print(f"‚úÖ [{i}/{len(users)}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {username}")
            
        except FloodWaitError as e:
            print(f"‚è≥ [{i}/{len(users)}] –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)
            try:
                await client.send_message(user_id, message_text)
                success_count += 1
                print(f"‚úÖ [{i}/{len(users)}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {username}")
            except Exception as retry_e:
                fail_count += 1
                print(f"‚ùå [{i}/{len(users)}] –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è {username}: {retry_e}")
                
        except Exception as e:
            fail_count += 1
            error_msg = str(e)
            if "USER_IS_BLOCKED" in error_msg:
                print(f"‚ùå [{i}/{len(users)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            elif "PEER_FLOOD" in error_msg:
                print(f"‚ùå [{i}/{len(users)}] –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {username}")
                break
            elif "USER_BANNED" in error_msg:
                print(f"‚ùå [{i}/{len(users)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–∞–Ω–µ–Ω")
            else:
                print(f"‚ùå [{i}/{len(users)}] –û—à–∏–±–∫–∞ –¥–ª—è {username}: {error_msg}")

        await asyncio.sleep(2)

    print(f"\nüìä –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}")
    print(f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {fail_count}")
    print(f"üì® –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ UserBot –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...")

    try:
        await client.start()
        me = await client.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return

    await send_mass_messages()

if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())