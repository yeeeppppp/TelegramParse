import configparser
import json
import asyncio
import random
from telethon import TelegramClient
from telethon.errors import FloodWaitError
from telethon.tl.functions.channels import InviteToChannelRequest, JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import InputPeerUser

# ------------------ –ß–¢–ï–ù–ò–ï –ö–û–ù–§–ò–ì–ê ------------------
config = configparser.ConfigParser()
config.read("config.ini")

api_id = config['Telegram']['api_id']
api_hash = config['Telegram']['api_hash']
username = config['Telegram']['username']
client = TelegramClient(username, api_id, api_hash)


# ------------------ –°–ë–û–† –£–ß–ê–°–¢–ù–ò–ö–û–í ------------------
async def collect_users(source_link):
    print(f"üì• –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑: {source_link}")
    participants = await client.get_participants(source_link)

    data = []
    for p in participants:
        data.append({
            "id": p.id,
            "access_hash": p.access_hash,
            "username": p.username,
            "first_name": p.first_name
        })

    with open("channel_users.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ channel_users.json")


# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–ê–ù–ê–õ ------------------
async def add_users_to_channel():
    with open('channel_users.json', 'r', encoding='utf-8') as file:
        users = json.load(file)

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    target_channel_input = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å: ")

    target_channel = None
    try:
        target_channel = await client.get_entity(target_channel_input)
        print(f"‚úÖ –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞: {target_channel.title}")
    except ValueError:
        print("ü§ù –í—Å—Ç—É–ø–∞–µ–º –≤ –∫–∞–Ω–∞–ª...")
        try:
            if "t.me/+" in target_channel_input:
                hash = target_channel_input.split("+")[1]
                await client(ImportChatInviteRequest(hash))
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
            else:
                await client(JoinChannelRequest(target_channel_input))
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª")

            target_channel = await client.get_entity(target_channel_input)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            return

    if target_channel is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ!")
        return

    print(f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_channel.title}")

    success_count = 0
    fail_count = 0
    skip_count = 0

    random.shuffle(users)

    for i, user in enumerate(users, 1):
        user_id = user.get('id')
        access_hash = user.get('access_hash')
        username_display = user.get('username') or user.get('first_name') or "Unknown"

        if not user_id or not access_hash:
            print(f"‚ùå [{i}/{len(users)}] –ù–µ—Ç access_hash —É {username_display}")
            fail_count += 1
            continue

        me = await client.get_me()
        if user_id == me.id:
            print(f"‚ö†Ô∏è [{i}/{len(users)}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è: {username_display}")
            skip_count += 1
            continue

        try:
            user_entity = InputPeerUser(user_id, access_hash)

            await client(InviteToChannelRequest(
                channel=target_channel,
                users=[user_entity]
            ))

            success_count += 1
            print(f"‚úÖ [{i}/{len(users)}] –î–æ–±–∞–≤–ª–µ–Ω: {username_display}")

        except FloodWaitError as e:
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)
            try:
                await client(InviteToChannelRequest(
                    channel=target_channel,
                    users=[user_entity]
                ))
                success_count += 1
                print(f"‚úÖ [{i}/{len(users)}] –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {username_display}")
            except Exception as retry_e:
                fail_count += 1
                _handle_add_error(retry_e, username_display, i, len(users))

        except Exception as e:
            fail_count += 1
            _handle_add_error(e, username_display, i, len(users))

        # –ü–∞—É–∑—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å –±–∞–Ω
        if success_count > 0 and success_count % 10 == 0:
            long_pause = random.randint(15, 35)
            print(f"‚è∏Ô∏è –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {long_pause} —Å–µ–∫ –ø–æ—Å–ª–µ {success_count} –¥–æ–±–∞–≤–ª–µ–Ω–∏–π...")
            await asyncio.sleep(long_pause)
        else:
            pause = random.randint(5, 15)
            await asyncio.sleep(pause)

    print(f"\nüìä –ò–¢–û–ì:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}")
    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skip_count}")
    print(f"‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {fail_count}")


# ------------------ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ------------------
def _handle_add_error(error, username, current, total):
    error_msg = str(error)
    if "USER_ALREADY_PARTICIPANT" in error_msg:
        print(f"‚ö†Ô∏è [{current}/{total}] –£–∂–µ –≤ –∫–∞–Ω–∞–ª–µ: {username}")
    elif "CHAT_ADMIN_REQUIRED" in error_msg:
        print(f"‚ùå [{current}/{total}] –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {username}")
    elif "USER_PRIVACY_RESTRICTED" in error_msg:
        print(f"‚ùå [{current}/{total}] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {username}")
    elif "FLOOD_WAIT" in error_msg:
        print(f"‚è≥ [{current}/{total}] –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑-–∑–∞ —Ñ–ª—É–¥–∞: {username}")
    else:
        print(f"‚ùå [{current}/{total}] –û—à–∏–±–∫–∞ –¥–ª—è {username}: {error_msg}")


# ------------------ MAIN ------------------
async def main():
    await client.start()
    me = await client.get_me()
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")

    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: [1] –°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, [2] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: ")

    if mode == "1":
        source = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞: ")
        await collect_users(source)
    elif mode == "2":
        await add_users_to_channel()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())
