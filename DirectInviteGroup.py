import configparser
import json
import asyncio
import random
import logging
from telethon import TelegramClient, connection
from telethon.errors import FloodWaitError, UserIdInvalidError, PeerIdInvalidError
from telethon.tl.functions.channels import InviteToChannelRequest, JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import InputPeerUser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

class MultiAccountInviter:
    def __init__(self, config_file='config.ini'):
        self.config = configparser.ConfigParser()
        self.config.read(config_file)
        self.accounts = []
        self.active_accounts = []
        
    def load_accounts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        for section in self.config.sections():
            if section.startswith('Account'):
                account_config = dict(self.config[section])
                # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if account_config.get('proxy'):
                    proxy_data = self._parse_proxy(account_config['proxy'])
                    account_config['proxy'] = proxy_data
                else:
                    account_config['proxy'] = None
                
                self.accounts.append(account_config)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {account_config.get('username', 'Unknown')}")
        
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")
    
    def _parse_proxy(self, proxy_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏"""
        if proxy_str.startswith('http'):
            from telethon.network import HTTPProxy
            import re
            match = re.match(r'http://(?:([^:]+):([^@]+)@)?([^:]+):(\d+)', proxy_str)
            if match:
                user, password, host, port = match.groups()
                return HTTPProxy(host, int(port), username=user, password=password)
        elif proxy_str.startswith('socks5'):
            from telethon.network import SOCKS5Proxy
            import re
            match = re.match(r'socks5://(?:([^:]+):([^@]+)@)?([^:]+):(\d+)', proxy_str)
            if match:
                user, password, host, port = match.groups()
                return SOCKS5Proxy(host, int(port), username=user, password=password)
        return None
    
    async def initialize_accounts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        clients = []
        for account in self.accounts:
            try:
                client = TelegramClient(
                    session=account.get('session_file', account['username']),
                    api_id=int(account['api_id']),
                    api_hash=account['api_hash'],
                    proxy=account.get('proxy'),
                    connection=connection.ConnectionTcpMTProxy if account.get('proxy') else None
                )
                
                await client.start(phone=lambda: account.get('phone', ''))
                me = await client.get_me()
                logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
                
                clients.append({
                    'client': client,
                    'username': account['username'],
                    'name': me.first_name,
                    'is_active': True
                })
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {account.get('username')}: {e}")
                continue
        
        self.active_accounts = clients
        return clients

    async def collect_users_multi(self, source_link):
        """–°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        if not self.active_accounts:
            logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
            return
        
        client_data = random.choice(self.active_accounts)
        client = client_data['client']
        
        logger.info(f"üì• –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑: {client_data['name']}")
        
        try:
            if source_link.startswith('@'):
                source_link = source_link[1:]
            entity = await client.get_entity(source_link)
            participants = await client.get_participants(entity, aggressive=True)

            data = []
            for p in participants:
                if p.id and p.access_hash:
                    data.append({
                        "id": p.id,
                        "access_hash": p.access_hash,
                        "username": p.username,
                        "first_name": p.first_name
                    })

            with open("channel_users.json", "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ channel_users.json")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def add_users_to_channel_multi(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        if not self.active_accounts:
            logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
            return
        
        try:
            with open('channel_users.json', 'r', encoding='utf-8') as file:
                users = json.load(file)
        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª channel_users.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        except json.JSONDecodeError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è channel_users.json")
            return

        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        target_channel_input = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å: ").strip()

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        users_per_acc = len(users) // len(self.active_accounts)
        user_chunks = [users[i:i + users_per_acc] for i in range(0, len(users), users_per_acc)]
        
        tasks = []
        for i, account_data in enumerate(self.active_accounts):
            if i < len(user_chunks):
                chunk = user_chunks[i]
                task = self._add_users_from_account(account_data, chunk, target_channel_input, i+1)
                tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        total_success = 0
        total_failed = 0
        
        for result in results:
            if isinstance(result, tuple):
                success, failed = result
                total_success += success
                total_failed += failed
        
        logger.info(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_success}")
        logger.info(f"‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_failed}")

    async def _add_users_from_account(self, account_data, users, target_channel_input, account_num):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        client = account_data['client']
        success_count = 0
        fail_count = 0
        
        logger.info(f"üë§ –ê–∫–∫–∞—É–Ω—Ç {account_num} ({account_data['name']}): –Ω–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º entity —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        try:
            target_channel = await client.get_entity(target_channel_input)
            logger.info(f"üéØ –ê–∫–∫–∞—É–Ω—Ç {account_num}: –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É {target_channel.title}")
        except Exception as e:
            logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_num}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return 0, len(users)
        
        for i, user in enumerate(users, 1):
            user_id = user.get('id')
            access_hash = user.get('access_hash')
            username_display = user.get('username') or user.get('first_name') or "Unknown"

            if not user_id or not access_hash:
                fail_count += 1
                continue

            try:
                user_id = int(user_id)
                access_hash = int(access_hash)
            except (TypeError, ValueError):
                fail_count += 1
                continue

            me = await client.get_me()
            if user_id == me.id:
                fail_count += 1
                continue

            try:
                user_entity = InputPeerUser(user_id, access_hash)
                await client.get_entity(user_entity)
                await client(InviteToChannelRequest(
                    channel=target_channel,
                    users=[user_entity]
                ))
                success_count += 1
                logger.info(f"‚úÖ [{account_num}] {i}/{len(users)} –î–æ–±–∞–≤–ª–µ–Ω: {username_display}")

            except FloodWaitError as e:
                logger.warning(f"‚è≥ [{account_num}] –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫...")
                await asyncio.sleep(e.seconds + 1)
                try:
                    await client(InviteToChannelRequest(
                        channel=target_channel,
                        users=[user_entity]
                    ))
                    success_count += 1
                    logger.info(f"‚úÖ [{account_num}] {i}/{len(users)} –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {username_display}")
                except Exception as retry_e:
                    fail_count += 1
                    self._handle_add_error(retry_e, username_display, account_num, i, len(users))

            except Exception as e:
                fail_count += 1
                self._handle_add_error(e, username_display, account_num, i, len(users))

            # –ü–∞—É–∑–∞
            if success_count > 0 and success_count % 10 == 0:
                await asyncio.sleep(random.randint(20, 40))
            else:
                await asyncio.sleep(random.uniform(1.5, 2.0))
        
        logger.info(f"üë§ –ê–∫–∫–∞—É–Ω—Ç {account_num} –∑–∞–≤–µ—Ä—à–∏–ª: ‚úÖ {success_count}, ‚ùå {fail_count}")
        return success_count, fail_count

    def _handle_add_error(self, error, username, account_num, current, total):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        error_msg = str(error).upper()
        if "USER_ALREADY_PARTICIPANT" in error_msg:
            logger.info(f"‚ö†Ô∏è [{account_num}] –£–∂–µ –≤ –∫–∞–Ω–∞–ª–µ: {username}")
        elif "CHAT_ADMIN_REQUIRED" in error_msg:
            logger.error(f"‚ùå [{account_num}] –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {username}")
        elif "USER_PRIVACY_RESTRICTED" in error_msg:
            logger.warning(f"üîí [{account_num}] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {username}")
        elif "FLOOD_WAIT" in error_msg:
            logger.warning(f"‚è≥ [{account_num}] –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ñ–ª—É–¥—É: {username}")
        elif "USER_NOT_MUTUAL_CONTACT" in error_msg:
            logger.warning(f"‚ùå [{account_num}] –ù–µ—Ç –≤–∑–∞–∏–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {username}")
        else:
            logger.error(f"‚ùå [{account_num}] –û—à–∏–±–∫–∞ –¥–ª—è {username}: {str(error)}")

    async def close_all(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        for account in self.active_accounts:
            await account['client'].disconnect()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    inviter = MultiAccountInviter('config.ini')
    inviter.load_accounts()
    
    try:
        await inviter.initialize_accounts()
        
        if not inviter.active_accounts:
            logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
            return
        
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: [1] –°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, [2] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: ").strip()

        if mode == "1":
            source = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞: ").strip()
            await inviter.collect_users_multi(source)
        elif mode == "2":
            await inviter.add_users_to_channel_multi()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    finally:
        await inviter.close_all()

if __name__ == "__main__":
    asyncio.run(main())