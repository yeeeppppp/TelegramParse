import configparser
import json
import asyncio
import random
from telethon import TelegramClient
from telethon.errors import FloodWaitError, UserIdInvalidError, PeerIdInvalidError
from telethon.tl.functions.channels import InviteToChannelRequest, JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import InputPeerUser

# ------------------ –ß–¢–ï–ù–ò–ï –ö–û–ù–§–ò–ì–ê ------------------
config = configparser.ConfigParser()
config.read("config.ini")

api_id = int(config['Telegram']['api_id'])
api_hash = config['Telegram']['api_hash']
username = config['Telegram']['username']
client = TelegramClient(username, api_id, api_hash)

# ------------------ –°–ë–û–† –£–ß–ê–°–¢–ù–ò–ö–û–í ------------------
async def collect_users(source_link):
    print(f"üì• –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑: {source_link}")
    try:
        if source_link.startswith('@'):
            source_link = source_link[1:]
        entity = await client.get_entity(source_link)
        participants = await client.get_participants(entity, aggressive=True)

        data = []
        for p in participants:
            if p.id and p.access_hash:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                data.append({
                    "id": p.id,
                    "access_hash": p.access_hash,
                    "username": p.username,
                    "first_name": p.first_name
                })

        with open("channel_users.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ channel_users.json")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–ê–ù–ê–õ ------------------
async def add_users_to_channel():
    try:
        with open('channel_users.json', 'r', encoding='utf-8') as file:
            users = json.load(file)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª channel_users.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∂–∏–º 1).")
        return
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è channel_users.json: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
        return

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    target_channel_input = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å: ").strip()

    target_channel = None
    try:
        target_channel = await client.get_entity(target_channel_input)
        print(f"‚úÖ –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞: {target_channel.title}")
    except (ValueError, PeerIdInvalidError):
        print("ü§ù –í—Å—Ç—É–ø–∞–µ–º –≤ –∫–∞–Ω–∞–ª...")
        try:
            if "t.me/+" in target_channel_input:
                hash_value = target_channel_input.split("+")[1]
                await client(ImportChatInviteRequest(hash_value))
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
            elif "t.me/joinchat/" in target_channel_input:
                hash_value = target_channel_input.split("joinchat/")[1]
                await client(ImportChatInviteRequest(hash_value))
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
            else:
                await client(JoinChannelRequest(target_channel_input))
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª")
            target_channel = await client.get_entity(target_channel_input)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            return

    if target_channel is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ!")
        return

    print(f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_channel.title}")

    success_count = 0
    fail_count = 0
    skip_count = 0

    for i, user in enumerate(users, 1):  # –£–±—Ä–∞–Ω–æ random.shuffle
        user_id = user.get('id')
        access_hash = user.get('access_hash')
        username_display = user.get('username') or user.get('first_name') or "Unknown"

        if not user_id or not access_hash:
            print(f"‚ùå [{i}/{len(users)}] –ù–µ—Ç user_id –∏–ª–∏ access_hash —É {username_display}")
            fail_count += 1
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            user_id = int(user_id)
            access_hash = int(access_hash)
        except (TypeError, ValueError):
            print(f"‚ùå [{i}/{len(users)}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ access_hash –¥–ª—è {username_display}")
            fail_count += 1
            continue

        me = await client.get_me()
        if user_id == me.id:
            print(f"‚ö†Ô∏è [{i}/{len(users)}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è: {username_display}")
            skip_count += 1
            continue

        try:
            user_entity = InputPeerUser(user_id, access_hash)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            await client.get_entity(user_entity)
            await client(InviteToChannelRequest(
                channel=target_channel,
                users=[user_entity]
            ))
            success_count += 1
            print(f"‚úÖ [{i}/{len(users)}] –î–æ–±–∞–≤–ª–µ–Ω: {username_display}")

        except FloodWaitError as e:
            print(f"‚è≥ [{i}/{len(users)}] –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds + 1)
            try:
                await client(InviteToChannelRequest(
                    channel=target_channel,
                    users=[user_entity]
                ))
                success_count += 1
                print(f"‚úÖ [{i}/{len(users)}] –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {username_display}")
            except Exception as retry_e:
                fail_count += 1
                _handle_add_error(retry_e, username_display, i, len(users))

        except (UserIdInvalidError, PeerIdInvalidError) as e:
            print(f"‚ùå [{i}/{len(users)}] –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username_display} - {str(e)}")
            fail_count += 1
        except Exception as e:
            fail_count += 1
            _handle_add_error(e, username_display, i, len(users))

        # –ê–Ω—Ç–∏-–±–∞–Ω –ø–∞—É–∑—ã
        if success_count > 0 and success_count % 10 == 0:
            long_pause = random.randint(20, 40)
            print(f"‚è∏Ô∏è –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {long_pause} —Å–µ–∫ –ø–æ—Å–ª–µ {success_count} –¥–æ–±–∞–≤–ª–µ–Ω–∏–π...")
            await asyncio.sleep(long_pause)
        else:
            pause = random.uniform(1.5, 2.0)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1.5-2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(pause)

    print(f"\nüìä –ò–¢–û–ì:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}")
    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skip_count}")
    print(f"‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {fail_count}")

# ------------------ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ------------------
def _handle_add_error(error, username, current, total):
    error_msg = str(error).upper()
    if "USER_ALREADY_PARTICIPANT" in error_msg:
        print(f"‚ö†Ô∏è [{current}/{total}] –£–∂–µ –≤ –∫–∞–Ω–∞–ª–µ: {username}")
    elif "CHAT_ADMIN_REQUIRED" in error_msg:
        print(f"‚ùå [{current}/{total}] –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {username}")
    elif "USER_PRIVACY_RESTRICTED" in error_msg:
        print(f"‚ùå [{current}/{total}] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {username}")
    elif "FLOOD_WAIT" in error_msg or "FLOOD" in error_msg:
        print(f"‚è≥ [{current}/{total}] –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ñ–ª—É–¥—É: {username}")
    elif "USER_NOT_MUTUAL_CONTACT" in error_msg:
        print(f"‚ùå [{current}/{total}] –ù–µ—Ç –≤–∑–∞–∏–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {username}")
    else:
        print(f"‚ùå [{current}/{total}] –û—à–∏–±–∫–∞ –¥–ª—è {username}: {str(error)}")

# ------------------ MAIN ------------------
async def main():
    await client.start()
    me = await client.get_me()
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")

    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: [1] –°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, [2] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: ").strip()

    if mode == "1":
        source = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞: ").strip()
        await collect_users(source)
    elif mode == "2":
        await add_users_to_channel()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())